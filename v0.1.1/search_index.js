var documenterSearchIndex = {"docs":
[{"location":"kalman/#Kalman-Class-Filters-1","page":"Kalman-class Filters","title":"Kalman-Class Filters","text":"","category":"section"},{"location":"kalman/#","page":"Kalman-class Filters","title":"Kalman-class Filters","text":"CurrentModule = GaussianFilters","category":"page"},{"location":"kalman/#","page":"Kalman-class Filters","title":"Kalman-class Filters","text":"The Kalman, Extended Kalman, and Unscented Kalman filters are used to estimate state using unimodal multivariate Gaussian distributions. A state estimate in this framework is defined as a GaussianBelief consisting of a mean and covariance.","category":"page"},{"location":"kalman/#","page":"Kalman-class Filters","title":"Kalman-class Filters","text":"GaussianFilters.GaussianBelief","category":"page"},{"location":"kalman/#GaussianFilters.GaussianBelief","page":"Kalman-class Filters","title":"GaussianFilters.GaussianBelief","text":"GaussianBelief(μ::AbstractVector,Σ::Symmetric)\nGaussianBelief(μ::AbstractVector,Σ::AbstractMatrix)\n\nConstruct a gaussian belief, consisting of mean vector μ and symmetric covariance matrix Σ\n\n\n\n\n\n","category":"type"},{"location":"kalman/#Building-a-Filter-1","page":"Kalman-class Filters","title":"Building a Filter","text":"","category":"section"},{"location":"kalman/#","page":"Kalman-class Filters","title":"Kalman-class Filters","text":"In general, Kalman-class filters can be built with either linear or non-linear dynamics and measurement models. Linear models should be defined with appropriately matrices. Non-linear models should be defined using an appropriate function of two variables, state and action. Both models should be defined with symmetric noise covariance matrices.","category":"page"},{"location":"kalman/#","page":"Kalman-class Filters","title":"Kalman-class Filters","text":"NOTE: There is no need to define Jacobians for non-linear models, since this package uses automatic forward differentiation to compute Jacobians in real time. Just make sure the models are forward differentiable in all possible belief locations.","category":"page"},{"location":"kalman/#","page":"Kalman-class Filters","title":"Kalman-class Filters","text":"GaussianFilters.LinearDynamicsModel\nGaussianFilters.LinearObservationModel\nGaussianFilters.NonlinearDynamicsModel\nGaussianFilters.NonlinearObservationModel","category":"page"},{"location":"kalman/#GaussianFilters.LinearDynamicsModel","page":"Kalman-class Filters","title":"GaussianFilters.LinearDynamicsModel","text":"LinearDynamicsModel(A::AbstractMatrix,B::AbstractMatrix,W::Symmetric)\nLinearDynamicsModel(A::AbstractMatrix,B::AbstractMatrix,W::AbstractMatrix)\n\nConstruct linear dynamics model with; transition matrix A, control matrix B, and symmetric zero-mean process noise with symmetric covariance matrix W\n\n\n\n\n\n","category":"type"},{"location":"kalman/#GaussianFilters.LinearObservationModel","page":"Kalman-class Filters","title":"GaussianFilters.LinearObservationModel","text":"LinearObservationModel(C::AbstractMatrix,D::AbstractMatrix,V::Symmetric)\nLinearObservationModel(C::AbstractMatrix,D::AbstractMatrix,V::AbstractMatrix)\nLinearObservationModel(C::AbstractMatrix,V::Symmetric)\nLinearObservationModel(C::AbstractMatrix,V::AbstractMatrix)\n\nConstruct linear observation dynamics model with; transition matrix C, control matrix B, and symmetric zero-mean measurement noise with symmetric covariance matrix V\n\n\n\n\n\n","category":"type"},{"location":"kalman/#GaussianFilters.NonlinearDynamicsModel","page":"Kalman-class Filters","title":"GaussianFilters.NonlinearDynamicsModel","text":"NonlinearDynamicsModel(f::Function,W::Symmetric)\nNonlinearDynamicsModel(f::Function,W::AbstractMatrix)\n\nConstruct nonlinear dynamics model with transition function f and symmetric zero-mean process noise with symmetric covariance matrix W\n\n\n\n\n\n","category":"type"},{"location":"kalman/#GaussianFilters.NonlinearObservationModel","page":"Kalman-class Filters","title":"GaussianFilters.NonlinearObservationModel","text":"NonlinearObservationModel(h::Function,V::Symmetric)\nNonlinearObservationModel(h::Function,V::AbstractMatrix)\n\nConstruct nonlinear observation dynamics model with measurement function h and symmetric zero-mean measurement noise with symmetric covariance matrix V\n\n\n\n\n\n","category":"type"},{"location":"kalman/#","page":"Kalman-class Filters","title":"Kalman-class Filters","text":"Use the filter constructors with the appropriately typed models to build a filter. It is recommended to always construct a Kalman filter type when both dynamics and observation models are linear.","category":"page"},{"location":"kalman/#","page":"Kalman-class Filters","title":"Kalman-class Filters","text":"GaussianFilters.KalmanFilter\nGaussianFilters.ExtendedKalmanFilter\nGaussianFilters.UnscentedKalmanFilter","category":"page"},{"location":"kalman/#GaussianFilters.KalmanFilter","page":"Kalman-class Filters","title":"GaussianFilters.KalmanFilter","text":"KalmanFilter(d::LinearDynamicsModel,o::LinearObservationModel)\n\nConstruct Kalman filter with LinearDynamicsModel d and LinearObservationModel o.\n\n\n\n\n\n","category":"type"},{"location":"kalman/#GaussianFilters.ExtendedKalmanFilter","page":"Kalman-class Filters","title":"GaussianFilters.ExtendedKalmanFilter","text":"ExtendedKalmanFilter(d::DynamicsModel,o::ObservationModel)\nKalmanFilter(d::DynamicsModel,o::ObservationModel,λ::Number,\n    α::Float,β::Float)\n\nConstruct Extended Kalman filter with DynamicsModel d and ObservationModel o.\n\n\n\n\n\n","category":"type"},{"location":"kalman/#GaussianFilters.UnscentedKalmanFilter","page":"Kalman-class Filters","title":"GaussianFilters.UnscentedKalmanFilter","text":"UnscentedKalmanFilter(d::DynamicsModel,o::ObservationModel,λ::Number,\n    α::Float,β::Float)\nUnscentedKalmanFilter(d::DynamicsModel,o::ObservationModel,λ::Number)\nUnscentedKalmanFilter(d::DynamicsModel,o::ObservationModel)\n\nConstruct Unscented Kalman filter with DynamicsModel d, ObservationModel o, and UKF parameters λ, α, and β. Default constructor uses α/β formulation from Probabilistic Robotics, second constructor reduces complexity, third constructor defaults λ to 2, as is commonly done.\n\n\n\n\n\n","category":"type"},{"location":"kalman/#Simulating-Data-1","page":"Kalman-class Filters","title":"Simulating Data","text":"","category":"section"},{"location":"kalman/#","page":"Kalman-class Filters","title":"Kalman-class Filters","text":"Given a filter, an initial belief, and an action sequence, you can either simulate state and measurement data all at once with simulation or one step at a time with simulate_step","category":"page"},{"location":"kalman/#","page":"Kalman-class Filters","title":"Kalman-class Filters","text":"GaussianFilters.simulation\nGaussianFilters.simulate_step","category":"page"},{"location":"kalman/#GaussianFilters.simulation","page":"Kalman-class Filters","title":"GaussianFilters.simulation","text":"simulation(filter::AbstractFilter, b0::GaussianBelief,\n            action_sequence::Vector{AbstractVector}})\n\nRun a simulation to get positions and measurements. Samples starting point from GaussianBelief b0, the runs action_sequence with additive gaussian noise all specified by AbstractFilter filter to return a simulated state and measurement history.\n\n\n\n\n\n","category":"function"},{"location":"kalman/#GaussianFilters.simulate_step","page":"Kalman-class Filters","title":"GaussianFilters.simulate_step","text":"simulate_step(filter::AbstractFilter, x::AbstractVector, u::AbstractVector, rng::AbstractRNG=Random.GLOBAL_RNG)\n\nRun a step of simulation starting at state x, taking action u, and using the motion and measurement equations specified by the filter.\n\n\n\n\n\n","category":"function"},{"location":"kalman/#","page":"Kalman-class Filters","title":"Kalman-class Filters","text":"In addition, the dynamics and observation models can be queried on a single state control input using the predict and measure methods respectively.","category":"page"},{"location":"kalman/#","page":"Kalman-class Filters","title":"Kalman-class Filters","text":"    predict(::LinearDynamicsModel, ::AbstractVector{<:Number}, ::AbstractVector{<:Number})\n    predict(::NonlinearDynamicsModel, ::AbstractVector{<:Number}, ::AbstractVector{<:Number})\n    measure(::LinearObservationModel, ::AbstractVector{<:Number}, ::AbstractVector{<:Number})\n    measure(::NonlinearObservationModel, ::AbstractVector{<:Number}, ::AbstractVector{<:Number})","category":"page"},{"location":"kalman/#GaussianFilters.predict-Tuple{LinearDynamicsModel,AbstractArray{#s1,1} where #s1<:Number,AbstractArray{#s2,1} where #s2<:Number}","page":"Kalman-class Filters","title":"GaussianFilters.predict","text":"predict(m::LinearDynamicsModel, x::AbstractVector{<:Number}, u::AbstractVector{<:Number})\npredict(m::LinearDynamicsModel, x::AbstractVector{<:Number}, u::AbstractVector{<:Number}, rng::AbstractRNG)\n\nUses the linear dynamics model to propagate the state x one step forward in time with control input u. If rng is given, it adds process noise. \n\n\n\n\n\n","category":"method"},{"location":"kalman/#GaussianFilters.predict-Tuple{NonlinearDynamicsModel,AbstractArray{#s2,1} where #s2<:Number,AbstractArray{#s1,1} where #s1<:Number}","page":"Kalman-class Filters","title":"GaussianFilters.predict","text":"predict(m::NonLinearDynamicsModel, x::AbstractVector{<:Number}, u::AbstractVector{<:Number})\npredict(m::NonLinearDynamicsModel, x::AbstractVector{<:Number}, u::AbstractVector{<:Number}, rng::AbstractRNG)\n\nUses the non linear dynamics model to propagate the state x one step forward in time with control input u. If rng is given, it adds process noise. \n\n\n\n\n\n","category":"method"},{"location":"kalman/#GaussianFilters.measure-Tuple{LinearObservationModel,AbstractArray{#s2,1} where #s2<:Number,AbstractArray{#s1,1} where #s1<:Number}","page":"Kalman-class Filters","title":"GaussianFilters.measure","text":"measure(m::LinearObservationModel, x::AbstractVector{<:Number}, u::AbstractVector{<:Number})\nmeasure(m::LinearObservationModel, x::AbstractVector{T}, u::AbstractVector{T}, rng::AbstractRNG) where T<:Number\n\nReturns an observation of state x according to the linear observation model m, with control inputs u. If rng is passed, adds additive Gaussian noise to the observation.\n\n\n\n\n\n","category":"method"},{"location":"kalman/#GaussianFilters.measure-Tuple{NonlinearObservationModel,AbstractArray{#s2,1} where #s2<:Number,AbstractArray{#s1,1} where #s1<:Number}","page":"Kalman-class Filters","title":"GaussianFilters.measure","text":"measure(m::LinearObservationModel, x::AbstractVector{<:Number}, u::AbstractVector{<:Number})\nmeasure(m::LinearObservationModel, x::AbstractVector{T}, u::AbstractVector{T}, rng::AbstractRNG) where T<:Number\n\nReturns an observation of state x according to the non linear observation model m, with control inputs u. If rng is passed, adds additive Gaussian noise to the observation.\n\n\n\n\n\n","category":"method"},{"location":"kalman/#Running-a-Filter-1","page":"Kalman-class Filters","title":"Running a Filter","text":"","category":"section"},{"location":"kalman/#","page":"Kalman-class Filters","title":"Kalman-class Filters","text":"You can run a filter on a sequential measurement data using the run_filter function.","category":"page"},{"location":"kalman/#","page":"Kalman-class Filters","title":"Kalman-class Filters","text":"GaussianFilters.run_filter","category":"page"},{"location":"kalman/#GaussianFilters.run_filter","page":"Kalman-class Filters","title":"GaussianFilters.run_filter","text":"run_filter(filter::AbstractFilter, b0::GaussianBelief, action_history::Vector{AbstractVector},\n        measurement_history::Vector{AbstractVector})\n\nGiven an initial belief b0, matched-size arrays for action and measurement histories and a filter, update the beliefs using the filter, and return a vector of all beliefs.\n\n\n\n\n\n","category":"function"},{"location":"kalman/#","page":"Kalman-class Filters","title":"Kalman-class Filters","text":"Alternatively, you can make step-wise belief updates using the update function, which consists of a two-step process to a) predict the next state given a known action and b) make measurement-based belief updates with measure.","category":"page"},{"location":"kalman/#","page":"Kalman-class Filters","title":"Kalman-class Filters","text":"GaussianFilters.update\nGaussianFilters.predict\nGaussianFilters.measure","category":"page"},{"location":"kalman/#Utilities-1","page":"Kalman-class Filters","title":"Utilities","text":"","category":"section"},{"location":"kalman/#","page":"Kalman-class Filters","title":"Kalman-class Filters","text":"The output of running a filter is a GaussianBelief vector, which can be condensed into appropriate tensors with unpack.","category":"page"},{"location":"kalman/#","page":"Kalman-class Filters","title":"Kalman-class Filters","text":"GaussianFilters.unpack","category":"page"},{"location":"kalman/#GaussianFilters.unpack","page":"Kalman-class Filters","title":"GaussianFilters.unpack","text":"unpack(belief_history::Vector{<:GaussianBelief};\n    dims::Vector{Int}=[])\n\nGiven a history of beliefs, return an unpacked (time steps, state dim)-sized array of predicted means and a (time steps, state dim, state dim)-sized array of covariances. One can optionally specify dimensions indices dims to output reduced state information.\n\n\n\n\n\n","category":"function"},{"location":"kalman/#","page":"Kalman-class Filters","title":"Kalman-class Filters","text":"belief_ellipse can be used to convert a 2-D Gaussian belief into points along a confidence interval ellipse for plotting.","category":"page"},{"location":"kalman/#","page":"Kalman-class Filters","title":"Kalman-class Filters","text":"GaussianFilters.belief_ellipse","category":"page"},{"location":"kalman/#GaussianFilters.belief_ellipse","page":"Kalman-class Filters","title":"GaussianFilters.belief_ellipse","text":"belief_ellipse(b::GaussianBelief, P::Float=0.95; δ::Number=5)\n\nConstruct and return the x and y points of a 2D gaussian belief, with P being the total probability captured by the ellipse (P ∈ (0,1)), and δ the degree increment between points.\n\n\n\n\n\n","category":"function"},{"location":"kalman/#Examples-1","page":"Kalman-class Filters","title":"Examples","text":"","category":"section"},{"location":"kalman/#","page":"Kalman-class Filters","title":"Kalman-class Filters","text":"Full implementation examples can be found in the notebooks folder of the repo:","category":"page"},{"location":"kalman/#","page":"Kalman-class Filters","title":"Kalman-class Filters","text":"Kalman Filter Example","category":"page"},{"location":"kalman/#","page":"Kalman-class Filters","title":"Kalman-class Filters","text":"Extended Kalman Filter Example","category":"page"},{"location":"kalman/#","page":"Kalman-class Filters","title":"Kalman-class Filters","text":"Unscented Kalman Filter Example","category":"page"},{"location":"gmphd/#Gaussian-Mixture-Probability-Hypothesis-Density-Filter-1","page":"GM-PHD Filter","title":"Gaussian Mixture Probability Hypothesis Density Filter","text":"","category":"section"},{"location":"gmphd/#","page":"GM-PHD Filter","title":"GM-PHD Filter","text":"CurrentModule = GaussianFilters","category":"page"},{"location":"gmphd/#","page":"GM-PHD Filter","title":"GM-PHD Filter","text":"A Gaussian Mixture Probability Hypothesis Density (GM-PHD) Filter handles multi-object tracking in a low signal-to-noise environment by recursively propagating an unnormalized Gaussian Mixture Model, which when integrated over a volume corresponds with the expected number of objects in that volume.","category":"page"},{"location":"gmphd/#","page":"GM-PHD Filter","title":"GM-PHD Filter","text":"GaussianFilters.GaussianMixture","category":"page"},{"location":"gmphd/#GaussianFilters.GaussianMixture","page":"GM-PHD Filter","title":"GaussianFilters.GaussianMixture","text":"GaussianMixture(N::Int64, w::Vector{Number}, μ::Vector{AbstractVector},\n    Σ::Vector{AbstractMatrix})\nGaussianMixture(w::Vector{Number}, μ::Vector{AbstractVector},\n    Σ::Vector{AbstractMatrix})\n\nArguments:\nN: Number of models\nw: Weights\nμ: Means of the model\nΣ: Covariances of the model\n\n\n\n\n\n","category":"type"},{"location":"gmphd/#Building-a-GM-PHD-Filter-1","page":"GM-PHD Filter","title":"Building a GM-PHD Filter","text":"","category":"section"},{"location":"gmphd/#","page":"GM-PHD Filter","title":"GM-PHD Filter","text":"Building a GM-PHD Filter requires defining a birth intensity model of type GaussianMixture for where objects can be globally born, a spawn intensity model of type Spawn for how new objects can spawn off old objects, a Vector of possible linear dynamics models of type Dynamics, a linear measurement model of type Measurement, a survival probability, a detection probability, and a clutter modeling function.","category":"page"},{"location":"gmphd/#","page":"GM-PHD Filter","title":"GM-PHD Filter","text":"GaussianFilters.Spawn\nGaussianFilters.Dynamics\nGaussianFilters.Measurement","category":"page"},{"location":"gmphd/#GaussianFilters.Spawn","page":"GM-PHD Filter","title":"GaussianFilters.Spawn","text":"Spawn(β::GaussianMixture, dyn::Vector{Dynamics})\n\nArguments:\nβ: Gaussian Mixture model determining the\nspawning intesity of the target\ndyn: Dynamics\n\n\n\n\n\n","category":"type"},{"location":"gmphd/#GaussianFilters.Dynamics","page":"GM-PHD Filter","title":"GaussianFilters.Dynamics","text":"Dynamics(A::AbstractMatrix, Q::AbstractMatrix, d::AbstractVector)\nDynamics(A::AbstractMatrix, Q::AbstractMatrix)\n\nConstruct linear dynamics model with; transition matrix A, process noise matrix Q and offset vector d\n\n\n\n\n\n","category":"type"},{"location":"gmphd/#GaussianFilters.Measurement","page":"GM-PHD Filter","title":"GaussianFilters.Measurement","text":"Measurement(C::AbstractMatrix, R::AbstractMatrix)\n\nConstruct measurement model with observation matrix C and sensor noise matrix R\n\n\n\n\n\n","category":"type"},{"location":"gmphd/#","page":"GM-PHD Filter","title":"GM-PHD Filter","text":"Once all of these are defined, a GM-PHD filter can be constructed with PHDFilter.","category":"page"},{"location":"gmphd/#","page":"GM-PHD Filter","title":"GM-PHD Filter","text":"GaussianFilters.PHDFilter","category":"page"},{"location":"gmphd/#GaussianFilters.PHDFilter","page":"GM-PHD Filter","title":"GaussianFilters.PHDFilter","text":"PHDFilter(γ::GaussianMixture, spawn::Spawn, dyn::Vector{Dynamics},\n    meas::Measurement, Ps::Float64, Pd::Float64, κ::Function)\nPHDFilter(γ::GaussianMixture, spawn::Spawn, dyn::Dynamics,\n    meas::Measurement, Ps::Float64, Pd::Float64, κ::Function)\n\nSets up a PHD Filter\n\nArguments:\nγ: Birth intensity\nspawn: Spawning intensity\ndyn: Vector of possible Dynamics models\nmeas: Measurements\nPs: Survival probability\nPd: Detection probability\n\n\n\n\n\n","category":"type"},{"location":"gmphd/#Running-a-GM-PHD-Filter-1","page":"GM-PHD Filter","title":"Running a GM-PHD Filter","text":"","category":"section"},{"location":"gmphd/#","page":"GM-PHD Filter","title":"GM-PHD Filter","text":"Currently, the GM-PHD Filter must be run step-by-step. Similar to the Kalman-Class filters, this can be done with a single call to update, which wraps functions to predict the next state, perform a measurement update with measure, and prune the resulting mixture model of low-probability and sufficiently close mixtures.","category":"page"},{"location":"gmphd/#","page":"GM-PHD Filter","title":"GM-PHD Filter","text":"GaussianFilters.update\nGaussianFilters.predict\nGaussianFilters.measure\nGaussianFilters.prune","category":"page"},{"location":"gmphd/#GaussianFilters.update","page":"GM-PHD Filter","title":"GaussianFilters.update","text":"update(filter::AbstractFilter, b0::GaussianBelief, u::AbstractVector,\n    y::AbstractVector)\n\nUses AbstractFilter filter to update gaussian belief b0, given control vector u and measurement vector y.\n\n\n\n\n\nupdate(phd::PHDFilter, b0::GaussianMixture, Z::Vector{AbstractVector},\n\tT::Real, U::Real, J_max::Integer)\n\nPerform an update step using a GMPHD Filter.\n\nArguments:\n\nphd::PHDFilter PHD filter to step through. [PHD Filter]\nb0::GaussianMixture Prior state distribution. [Gaussian Mixture]\nZ::Matrix Matrix of measurements. [Measurements]\nT::Real Truncation threshold.  Drop distributions with weight less than T\nU::Real Merging threshold.  Merge if (μ1-μ2)^T * Σ^-1 * (μ1-μ2) < U\nJ_max::Integer Maximum number of features\n\nReturns:\n\nbn::GaussianMixture Describe first return value. [Gaussian Mixture]\n\nReferences:\n\nVo, B. N., & Ma, W. K. (2006). The Gaussian mixture probability hypothesis\n\ndensity filter. IEEE Transactions on signal processing, 54(11), 4091-4104.\n\n\n\n\n\n","category":"function"},{"location":"gmphd/#GaussianFilters.predict","page":"GM-PHD Filter","title":"GaussianFilters.predict","text":"predict(m::LinearDynamicsModel, x::AbstractVector{<:Number}, u::AbstractVector{<:Number})\npredict(m::LinearDynamicsModel, x::AbstractVector{<:Number}, u::AbstractVector{<:Number}, rng::AbstractRNG)\n\nUses the linear dynamics model to propagate the state x one step forward in time with control input u. If rng is given, it adds process noise. \n\n\n\n\n\npredict(m::NonLinearDynamicsModel, x::AbstractVector{<:Number}, u::AbstractVector{<:Number})\npredict(m::NonLinearDynamicsModel, x::AbstractVector{<:Number}, u::AbstractVector{<:Number}, rng::AbstractRNG)\n\nUses the non linear dynamics model to propagate the state x one step forward in time with control input u. If rng is given, it adds process noise. \n\n\n\n\n\npredict(filter::KalmanFilter, b0::GaussianBelief, u::AbstractVector)\n\nUses Kalman filter to run prediction step on gaussian belief b0, given control vector u.\n\n\n\n\n\npredict(filter::ExtendedKalmanFilter, b0::GaussianBelief, u::AbstractVector)\n\nUses Extended Kalman filter to run prediction step on gaussian belief b0, given control vector u.\n\n\n\n\n\npredict(filter::UnscentedKalmanFilter, b0::GaussianBelief, u::AbstractVector)\n\nUses Unscented Kalman filter to run prediction step on gaussian belief b0, given control vector u.\n\n\n\n\n\npredict(phd::PHDFilter, b0::GaussianMixture)\n\nMake a prediction on next state based on PHD dynamics\n\nArguments:\n\nphd::PHDFilter PHD filter to step through. [PHD Filter]\nb0::GaussianMixture Prior state distribution. [Gaussian Mixture]\n\nReturns:\n\nbp::GaussianMixture Predicted next state distribution. [Gaussian Mixture]\n\nReferences:\n\nVo, B. N., & Ma, W. K. (2006). The Gaussian mixture probability hypothesis\n\ndensity filter. IEEE Transactions on signal processing, 54(11), 4091-4104.\n\n\n\n\n\n","category":"function"},{"location":"gmphd/#GaussianFilters.measure","page":"GM-PHD Filter","title":"GaussianFilters.measure","text":"measure(m::LinearObservationModel, x::AbstractVector{<:Number}, u::AbstractVector{<:Number})\nmeasure(m::LinearObservationModel, x::AbstractVector{T}, u::AbstractVector{T}, rng::AbstractRNG) where T<:Number\n\nReturns an observation of state x according to the linear observation model m, with control inputs u. If rng is passed, adds additive Gaussian noise to the observation.\n\n\n\n\n\nmeasure(m::LinearObservationModel, x::AbstractVector{<:Number}, u::AbstractVector{<:Number})\nmeasure(m::LinearObservationModel, x::AbstractVector{T}, u::AbstractVector{T}, rng::AbstractRNG) where T<:Number\n\nReturns an observation of state x according to the non linear observation model m, with control inputs u. If rng is passed, adds additive Gaussian noise to the observation.\n\n\n\n\n\nmeasure(filter::KalmanFilter, bp::GaussianBelief, y::AbstractVector;\n    u::AbstractVector = [false])\n\nUses Kalman filter to run measurement update on predicted gaussian belief bp, given measurement vector y. If u is specified and filter.o.D has been declared, then matrix D will be factored into the y predictions\n\n\n\n\n\nmeasure(filter::ExtendedKalmanFilter, bp::GaussianBelief, y::AbstractVector;\n    u::AbstractVector = [false])\n\nUses Extended Kalman filter to run measurement update on predicted gaussian belief bp, given measurement vector y. If u is specified and filter.o.D has been declared, then matrix D will be factored into the y predictions.\n\n\n\n\n\nmeasure(filter::UnscentedKalmanFilter, bp::GaussianBelief, y::AbstractVector;\n    u::AbstractVector = [false])\n\nUses Unscented Kalman filter to run measurement update on predicted gaussian belief bp, given measurement vector y. If u is specified and filter.o.D has been declared, then matrix D will be factored into the y predictions.\n\n\n\n\n\nmeasure(phd::PHDFilter, bp::GaussianMixture, Z::Vector{AbstractVector})\n\nPerform a measurement update on a predicted PHD next state.\n\nArguments:\n\nphd::PHDFilter PHD filter to step through. [PHD Filter]\nbp::GaussianMixture Prior state distribution. [Gaussian Mixture]\nZ::Vector{AbstractVector} Array of measurements. [Measurements]\n\nReturns:\n\nbm::GaussianMixture Describe first return value. [Gaussian Mixture]\n\nReferences:\n\nVo, B. N., & Ma, W. K. (2006). The Gaussian mixture probability hypothesis\n\ndensity filter. IEEE Transactions on signal processing, 54(11), 4091-4104.\n\n\n\n\n\n","category":"function"},{"location":"gmphd/#GaussianFilters.prune","page":"GM-PHD Filter","title":"GaussianFilters.prune","text":"prune(b::GaussianMixture, T::Real, U::Real, J_max::Integer)\n\nPrune the posterior Gaussian-Mixture next PHD state\n\nArguments:\n\nb::GaussianMixture Posterior state distribution. [Gaussian Mixture]\nT::Real Truncation threshold.  Drop distributions with weight less than T\nU::Real Merging threshold.  Merge if (μ1-μ2)^T * Σ^-1 * (μ1-μ2) < U\nJ_max::Integer Maximum number of features\n\n\n\n\n\n","category":"function"},{"location":"gmphd/#","page":"GM-PHD Filter","title":"GM-PHD Filter","text":"Target locations can be extracted from a GaussianMixture state using multiple_target_state_extraction.","category":"page"},{"location":"gmphd/#","page":"GM-PHD Filter","title":"GM-PHD Filter","text":"GaussianFilters.multiple_target_state_extraction","category":"page"},{"location":"gmphd/#GaussianFilters.multiple_target_state_extraction","page":"GM-PHD Filter","title":"GaussianFilters.multiple_target_state_extraction","text":"multiple_target_state_extraction(b::GaussianMixture, th::Real)\n\nExtracts targets whose weights (x.w) are above threshold.\n\nArguments:     b::GaussianMixture: Set of Gaussian Mixtures     th::Real: Threshold on weights. Above this threshold,     state estimate is extracted\n\nReturns:     X: Multi-Target State Estimate\n\n\n\n\n\n","category":"function"},{"location":"gmphd/#Examples-1","page":"GM-PHD Filter","title":"Examples","text":"","category":"section"},{"location":"gmphd/#","page":"GM-PHD Filter","title":"GM-PHD Filter","text":"Full implementation examples can be found in the notebooks folder of the repo:","category":"page"},{"location":"gmphd/#","page":"GM-PHD Filter","title":"GM-PHD Filter","text":"GM-PHD Object Surveillance Example","category":"page"},{"location":"gmphd/#","page":"GM-PHD Filter","title":"GM-PHD Filter","text":"GM-PHD Aircraft Carrier Example","category":"page"},{"location":"install/#Installation-1","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"install/#","page":"Installation","title":"Installation","text":"GaussianFilters can be installed by running:","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"using Pkg\nPkg.add(\"GaussianFilters\")","category":"page"},{"location":"#GaussianFilters-1","page":"Basics","title":"GaussianFilters","text":"","category":"section"},{"location":"#","page":"Basics","title":"Basics","text":"GaussianFilters implements methods to define and run Kalman, Extended Kalman, Unscented Kalman, and Gaussian-Mixture Probability Hypothesis Density Filters on simulated data. It also implements simulation functions for the Kalman-class filters.","category":"page"},{"location":"#","page":"Basics","title":"Basics","text":"The Kalman Filter and its nonlinear extensions (the Extended and Unscented KFs) are used commonly to localize state information from noisy observations [1]. Wikipedia's Kalman Filter entry is a useful resource for learning about the applications and advantages of the Kalman Filter, along with its nonlinear extensions.","category":"page"},{"location":"#","page":"Basics","title":"Basics","text":"The Gaussian Mixture Probability Hypothesis Density Filter [2] is the analogous recursive Gaussian filter used for estimating the \"time-varying number of targets and their states from a sequence of observation sets in the presence of data association uncertainty, detection uncertainty, noise, and false alarms\". The GM-PHDF excels at tracking multiple targets in a low signal-to-noise environment without the costliness of methods with explicit data association (e.g. multiple hypotheses tracking (MHT) and the joint probabilistic data association filter (JPDAF)).","category":"page"},{"location":"#","page":"Basics","title":"Basics","text":"GaussianFilters uses automatic forward differentiation in order to save users from having to manually calculate Jacobians for nonlinear prediction and measurement steps.","category":"page"},{"location":"#","page":"Basics","title":"Basics","text":"Thrun, S., Burgard, W., & Fox, D. (2005). Probabilistic robotics. MIT press.\nVo, B. N., & Ma, W. K. (2006). The Gaussian mixture probability hypothesis density filter. IEEE Transactions on signal processing, 54(11), 4091-4104.","category":"page"}]
}
